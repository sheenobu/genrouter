package main

var globalTemplate = `
	// generated by genrouter {{.Invocation}}; DO NOT EDIT

	package {{.Package}}

	import (
		"sync"
		"errors"
		{{.AdditionalImports}}
	)

	var {{.MapName}} map[{{.KeyType}}]{{.FnType}}
	var {{.LockName}} sync.RWMutex

	func init() {
		{{.LockName}}.Lock()
		defer {{.LockName}}.Unlock()
		{{.MapName}} = make(map[{{.KeyType}}]{{.FnType}})
	}

	func Register{{.FnType}}(key {{.KeyType}}, val {{.FnType}}) {
		{{.LockName}}.Lock()
		defer {{.LockName}}.Unlock()
		{{.MapName}}[key] = val
	}

	func Call{{.FnType}}(key {{.KeyType}}, {{.Args}}) {{.ReturnParams}} {
		{{.LockName}}.RLock()
		defer {{.LockName}}.RUnlock()
		r, ok := {{.MapName}}[key]

		if !ok {
			return {{.ErrorReturnVals}}
		}

		return r({{.CallArgs}})
	}
`
