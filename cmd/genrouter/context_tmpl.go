package main

var contextTemplate = `
	// generated by genrouter {{.Invocation}}; DO NOT EDIT

	package {{.Package}}

	import (
		"errors"

		{{.AdditionalImports}}

		"golang.org/x/net/context"
	)

	func Register{{.FnType}}(ctx context.Context, key {{.KeyType}}, val {{.FnType}}) context.Context {
		mp, ok := ctx.Value({{.ContextKey}}).(map[{{.KeyType}}]{{.FnType}})
		if !ok {
			mp = make(map[{{.KeyType}}]{{.FnType}})
		}
		mp[key] = val
		return context.WithValue(ctx, {{.ContextKey}}, mp)
	}

	func Call{{.FnType}}(ctx context.Context, key {{.KeyType}} {{.Args}}) {{.ReturnParams}} {
		r, ok := {{.FnTypeLower}}fromContext(ctx, key)
		if !ok {
			return {{.ErrorReturnVals}}
		}

		return r(ctx, {{.CallArgs}})
	}

	type {{.ContextKeyType}} int
	var {{.ContextKey}} {{.ContextKeyType}}

	func {{.FnTypeLower | }}fromContext(ctx context.Context, key {{.KeyType}}) ({{.FnType}}, bool) {
		mp, ok := ctx.Value({{.ContextKey}}).(map[{{.KeyType}}]{{.FnType}})
		if !ok {
			return nil, false
		}

		r, ok := mp[key]

		if !ok {
			return nil, false
		}

		return r, true
	}
`
